[root@cheux37oracleos7 vector_job]# nano vector.yaml
[root@cheux37oracleos7 vector_job]# vector -c vector.yaml
2025-07-03T12:03:11.964788Z  INFO vector::app: Log level is enabled. level="info"
2025-07-03T12:03:11.973903Z  INFO vector::app: Loading configs. paths=["vector.yaml"]
2025-07-03T12:03:11.983498Z  INFO vector::sources::file_descriptors: Capturing stdin.
2025-07-03T12:03:12.089042Z ERROR vector::topology::builder: Configuration error. error=Transform "enrich_flows":
error[E203]: syntax error
   ┌─ :26:16
   │
26 │ each(k, v) = . => {
   │                ^^
   │                │
   │                unexpected syntax token: "Operator"
   │                expected one of: ";", "\n", "|", "->", "+", "*", "-", "/", "<", "<=", ">", ">=", "==", "!=", "|", "&&", "||", "??"
   │
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

[root@cheux37oracleos7 vector_job]#





data_dir: /var/lib/vector

sources:
  flow_input:
    type: stdin
    # For Kafka:
    # type: kafka
    # bootstrap_servers: "localhost:9092"
    # topics: ["raw_flows"]
    # decoding.codec: json

transforms:
  enrich_flows:
    type: remap
    inputs:
      - flow_input
    source: |
      let _map = {
        "sourceIPv4Address": { target: "source_ip", default: "NA" },
        "destinationIPv4Address": { target: "dest_ip", default: "NA" },
        "protocolIdentifier": { target: "protocol_id", default: 0 },
        "protocolName": { target: "protocol_name", default: "NA" },
        "sourceTransportPort": { target: "src_port", default: 0 },
        "destinationTransportPort": { target: "dst_port", default: 0 },
        "application_name": { target: "app", default: "unknown" },
        "city_name": { target: "city", default: "NA" },
        "country_name": { target: "country", default: "NA" },
        "asn_number": { target: "asn", default: 0 },
        "asn_organization": { target: "asn_org", default: "NA" },
        "latitude": { target: "lat", default: 0 },
        "longitude": { target: "lon", default: 0 },
        "flow_duration_ms": { target: "duration", default: 0 },
        "flow_direction": { target: "direction", default: "unknown" },
        "bytes_accumulated": { target: "bytes", default: 0 },
        "packetDeltaCount": { target: "packets", default: 0 },
        "profile_name": { target: "profile", default: "NA" },
        "datalink_vlan": { target: "vlan", default: 0 }
      }

      let enriched = {}
      let extra = {}

      # Loop over all fields in the event
      for key in keys(.) {
        if exists(_map, key) {
          let entry = _map[key]
          enriched[entry.target] = get!(., key) ?? entry.default
        } else {
          extra[key] = get!(., key)
        }
      }

      # Add metadata
      enriched.flow_timestamp = now()
      enriched.time_inserted_ns = to_unix_timestamp!(enriched.flow_timestamp, "nanoseconds")
      enriched.extra_fields = extra

      # Final assignment
      . = enriched

sinks:
  kafka_out:
    type: kafka
    inputs:
      - enrich_flows
    bootstrap_servers: "localhost:9092"
    topic: "enriched_flows"
    encoding:
      codec: json
